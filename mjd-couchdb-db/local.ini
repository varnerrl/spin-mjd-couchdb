; CouchDB Configuration Settings

; Custom settings should be made in this file. They will override settings
; in default.ini, but unlike changes made to default.ini, this file won't be
; overwritten on server upgrade.

[couchdb]
;max_document_size = 4294967296 ; bytes
os_process_timeout = 1500000
uuid = 1f6eda67d6df32e7ed73178668b4e069
max_dbs_open = 2000

[couch_peruser]
; If enabled, couch_peruser ensures that a private per-user database
; exists for each document in _users. These databases are writable only
; by the corresponding user. Databases are in the following form:
; userdb-{hex encoded username}
;enable = true
; If set to true and a user is deleted, the respective database gets
; deleted as well.
;delete_dbs = true
; Set a default q value for peruser-created databases that is different from
; cluster / q
;q = 1

[compactions]
_default = [{db_fragmentation, "10%"}, {view_fragmentation, "10%"}, {from, "21:00"}, {to, "05:00"}]
cryovaca = [{db_fragmentation, "70%"}, {view_fragmentation, "60%"}]
cryovacb = [{db_fragmentation, "70%"}, {view_fragmentation, "60%"}]
mjddaq2 = [{db_fragmentation, "70%"}, {view_fragmentation, "60%"}]
onsite_analysis_mac_pro = [{db_fragmentation, "70%"}, {view_fragmentation, "60%"}]

[chttpd]
port = 5984
bind_address = 0.0.0.0
; Options for the MochiWeb HTTP server.
server_options = [{backlog, 128}, {acceptor_pool_size, 16}, {max, 2048}]
; For more socket options, consult Erlang's module 'inet' man page.
socket_options = [{sndbuf, 262144}, {nodelay, true}]
require_valid_user = true

[httpd]
; NOTE that this only configures the "backend" node-local port, not the
; "frontend" clustered port. You probably don't want to change anything in
; this section.
; Uncomment next line to trigger basic-auth popup on unauthorized requests.
;WWW-Authenticate = Basic realm="administrator"
WWW-Authenticate = Basic realm="valid-user"

; Uncomment next line to set the configuration modification whitelist. Only
; whitelisted values may be changed via the /_config URLs. To allow the admin
; to change this value over HTTP, remember to include {httpd,config_whitelist}
; itself. Excluding it from the list would require editing this file to update
; the whitelist.
;config_whitelist = [{httpd,config_whitelist}, {log,level}, {etc,etc}]

[query_servers]
;nodejs = /usr/local/bin/couchjs-node /path/to/couchdb/share/server/main.js

[couch_httpd_auth]
; If you set this to true, you should also uncomment the WWW-Authenticate line
; above. If you don't configure a WWW-Authenticate header, CouchDB will send
; Basic realm="server" in order to prevent you getting logged out.
require_valid_user = true
timeout = 15552000
secret = 481311fbf73378a9e260c388a99ddae6

[ssl]
port = 6984
enable = false
;cert_file = /full/path/to/server_cert.pem
cert_file = /opt/couchdb/certs/cert.pem
;key_file = /full/path/to/server_key.pem
key_file = /opt/couchdb/certs/privkey.pem
;password = somepassword
; set to true to validate peer certificates
verify_ssl_certificates = false
; Set to true to fail if the client does not send a certificate. Only used if verify_ssl_certificates is true.
;fail_if_no_peer_cert = false
; Path to file containing PEM encoded CA certificates (trusted
; certificates used for verifying a peer certificate). May be omitted if
; you do not want to verify the peer.
;cacert_file = /full/path/to/cacertf
cacert_file = /opt/couchdb/certs/chain.pem
; The verification fun (optional) if not specified, the default
; verification fun will be used.
;verify_fun = {Module, VerifyFun}
; maximum peer certificate depth
ssl_certificate_max_depth = 1
;
; Reject renegotiations that do not live up to RFC 5746.
;secure_renegotiate = true
; The cipher suites that should be supported.
; Can be specified in erlang format "{ecdhe_ecdsa,aes_128_cbc,sha256}"
; or in OpenSSL format "ECDHE-ECDSA-AES128-SHA256".
;ciphers = ["ECDHE-ECDSA-AES128-SHA256", "ECDHE-ECDSA-AES128-SHA"]
; The SSL/TLS versions to support
;tls_versions = [tlsv1, 'tlsv1.1', 'tlsv1.2']

; To enable Virtual Hosts in CouchDB, add a vhost = path directive. All requests to
; the Virual Host will be redirected to the path. In the example below all requests
; to http://example.com/ are redirected to /database.
; If you run CouchDB on a specific port, include the port number in the vhost:
; example.com:5984 = /database
[vhosts]
;example.com = /database/

; To create an admin account uncomment the '[admins]' section below and add a
; line in the format 'username = password'. When you next start CouchDB, it
; will change the password to a hash (so that your passwords don't linger
; around in plain-text files). You can add more admin accounts with more
; 'username = password' lines. Don't forget to restart CouchDB after
; changing this.
[admins]
;admin = mysecretpassword
varner = -pbkdf2-189185a72b32627c517fc836a02d5ad2c98a9b5c,2a540ffe9d0a65840c93c2f216862d2b,10
orca = 
tedeschi = -pbkdf2-2bd53c3dee0c73e67c23ac5d60e1d82f01765495,2372cb1387c8be556ed281f960bf26a8,10

[cluster]
n = 1

[cors]
origin = *
headers =
methods =

[query_server_config]
reduce_limit = true
os_process_limit = 2000
os_process_soft_limit = 1000

[replicator]
worker_processes = 30
connection_timeout = 1000000
checkpoint_interval = 30000
http_connections = 100

[log]
level = info

[fabric]
request_timeout = infinity
